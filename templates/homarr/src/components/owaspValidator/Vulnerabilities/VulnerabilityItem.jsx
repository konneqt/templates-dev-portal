import React from "react";
import { getSeverityColor, owaspMap } from "../utils";
import DisplayCodeContext from "../DisplayCodeContext";
import styles from "./styles.module.css";
import { useColorMode } from '@docusaurus/theme-common';

const VulnerabilityItem = ({ 
  violation, 
  index, 
  isExpanded, 
  toggleExpansion, 
  isLast,
  apiSpec
}) => {
  const { colorMode } = useColorMode();
  const isDarkTheme = colorMode === 'dark';
  
  // Map OWASP category to correct info
  const mapped = owaspMap[violation.category] || {
    id: `API${index + 1}:2023`,
    name: violation.category || `Security Violation ${index + 1}`,
    description: violation.description || 
      "This security issue requires attention as it may pose a risk to your API.",
  };

  return (
    <div
      id={`vulnerability-${index}`}
      className={`${styles.vulnerabilityItem} ${!isLast ? styles.vulnerabilityItemBorder : ""}`}
    >
      <div className={styles.vulnerabilityHeader}>
        <div className={styles.vulnerabilityTitleGroup}>
          <div
            className={styles.severityBadge}
            style={{
              backgroundColor: getSeverityColor(violation.severity),
            }}
          >
            {violation.severity || "Critical"}
          </div>
          <div className={styles.vulnerabilityTitle}>
            {mapped.name}
          </div>
        </div>
        <button
          onClick={toggleExpansion}
          className={`${styles.toggleButton} ${isExpanded ? styles.expandedButton : styles.collapsedButton}`}
        >
          {isExpanded ? (
            <>
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path 
                  d="M7 14L12 9L17 14H7Z" 
                  className={isDarkTheme ? styles.iconExpandDark : styles.iconExpandLight}
                />
              </svg>
              Hide details
            </>
          ) : (
            <>
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path 
                  d="M7 10L12 15L17 10H7Z" 
                  className={isDarkTheme ? styles.iconCollapseDark : styles.iconCollapseLight}
                />
              </svg>
              Show details
            </>
          )}
        </button>
      </div>

      <div
        className={styles.vulnerabilityInfo}
        style={{
          marginBottom: isExpanded ? "15px" : "0",
        }}
      >
        <div className={styles.vulnerabilityDescription}>
          {mapped.description}
        </div>
        <div className={styles.instanceBadge}>
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M12 2L1 21H23L12 2Z" className={styles.warningIcon} />
            <path
              d="M11 10H13V16H11V10ZM11 18H13V20H11V18Z"
              className={styles.warningIconPath}
            />
          </svg>
          {violation.occurrences?.length || 1} instances
        </div>
      </div>

      {/* Expanded Details Section */}
      {isExpanded && (
        <VulnerabilityDetails 
          violation={violation} 
          mapped={mapped} 
          apiSpec={apiSpec}
        />
      )}
    </div>
  );
};

const VulnerabilityDetails = ({ violation, mapped, apiSpec }) => {
  return (
    <div className={styles.detailsContainer}>
      <div className={styles.detailsHeader}>
        Detailed Occurrences
      </div>

      {violation.occurrences && violation.occurrences.length > 0 ? (
        <div className={styles.occurrencesList}>
          {violation.occurrences.map((occurrence, occIdx) => (
            <OccurrenceItem 
              key={occIdx} 
              occurrence={occurrence}
              occIdx={occIdx}
              apiSpec={apiSpec}
            />
          ))}
        </div>
      ) : (
        <GeneralRecommendation mapped={mapped} />
      )}
    </div>
  );
};

const OccurrenceItem = ({ occurrence, occIdx, apiSpec }) => {
  return (
    <div className={styles.occurrenceItem}>
      <div className={styles.occurrenceHeader}>
        Issue #{occIdx + 1}
        {occurrence.line ? ` - Line ${occurrence.line}` : ""}
      </div>

      {occurrence.line && (
        <div className={styles.codeBlock}>
          <div className={styles.errorIndicator}></div>
          <div className={styles.codeContent}>
            <DisplayCodeContext
              line={occurrence.line}
              apiSpec={apiSpec}
              contextLines={5}
            />
          </div>
        </div>
      )}

      {occurrence.suggestion && (
        <div>
          <div className={styles.recommendationTitle}>
            Recommendation:
          </div>
          <div className={styles.recommendationText}>
            {occurrence.suggestion}
          </div>
        </div>
      )}
    </div>
  );
};

const GeneralRecommendation = ({ mapped }) => {
  const getBestPractice = (id) => {
    switch (id) {
      case "API1:2023":
        return "Implement proper object level authorization checks for all sensitive resources.";
      case "API2:2023":
        return "Use standard authentication mechanisms and avoid custom authentication solutions.";
      case "API3:2023":
        return "Implement property-level access control for all resources containing sensitive data.";
      case "API4:2023":
        return "Set limits on resource consumption and implement proper rate limiting.";
      case "API5:2023":
        return "Implement function-level authorization checks for all sensitive operations.";
      case "API6:2023":
        return "Implement proper restrictions on business flows to prevent abuse.";
      case "API7:2023":
        return "Validate and sanitize all URL parameters before making server-side requests.";
      case "API8:2023":
        return "Establish secure configuration practices and regularly audit configurations.";
      case "API9:2023":
        return "Maintain a complete and up-to-date inventory of all API endpoints.";
      case "API10:2023":
        return "Validate and sanitize all data received from third-party APIs.";
      case "API11:2023":
        return "Implement comprehensive logging and monitoring for all API activities.";
      default:
        return "Implement appropriate security controls based on the risk level of this vulnerability.";
    }
  };

  return (
    <div className={styles.occurrenceItem}>
      <div className={styles.recommendationTitle}>
        General Recommendation
      </div>
      <div className={styles.recommendationText}>
        Implement proper security controls according to the OWASP API Security Top 10 
        guidelines for {mapped.name}.
      </div>
      <div className={styles.bestPracticeContainer}>
        <div className={styles.bestPracticeTitle}>
          Best Practice:
        </div>
        <div className={styles.bestPracticeText}>
          {getBestPractice(mapped.id)}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityItem;